export class ReaderFactoryBuilder {
    inner;
    constructor(inner) {
        this.inner = inner;
    }
    add(factory) {
        const nInner = this.inner;
        nInner.push(factory);
        return new ReaderFactoryBuilder(nInner);
    }
    build() {
        return new ReaderFactory(this.inner);
    }
}
export class WriterFactoryBuilder {
    inner;
    constructor(inner) {
        this.inner = inner;
    }
    add(factory) {
        const nInner = this.inner.slice();
        nInner.push(factory);
        return new WriterFactoryBuilder(nInner);
    }
    build() {
        return new WriterFactory(this.inner);
    }
}
function genericDeserialize(message) {
    try {
        return JSON.parse(message);
    }
    catch {
        return message;
    }
}
export function fromDeserializer(des) {
    if (des) {
        return des;
    }
    return genericDeserialize;
}
export class ReaderFactory {
    factories;
    constructor(factories) {
        this.factories = factories;
    }
    async build(config, deserializer) {
        for (const factory of this.factories) {
            if (factory.type.toLocaleLowerCase() === config.type.toLocaleLowerCase()) {
                return factory.build(config.config, deserializer);
            }
        }
        throw new Error("No correct factory found!");
    }
    async buildReader(configs, deserializers = {}) {
        const streams = {};
        await Promise.all(Object.entries(configs).map(async ([key, value]) => {
            streams[key] = await this.build(value, deserializers[key]);
        }));
        return streams;
    }
}
function genericSerialize(item) {
    if (typeof item === "string" || item instanceof String) {
        return item;
    }
    else {
        try {
            return JSON.stringify(item);
        }
        catch {
            return item.toString();
        }
    }
}
export function fromSerializer(ser) {
    if (ser) {
        return ser;
    }
    return genericSerialize;
}
export class WriterFactory {
    factories;
    constructor(factories) {
        this.factories = factories;
    }
    async build(config, serializer) {
        for (const factory of this.factories) {
            if (factory.type.toLocaleLowerCase() === config.type.toLowerCase()) {
                return factory.build(config.config, serializer);
            }
        }
        throw new Error("No correct factory found!");
    }
    async buildReader(configs, serializers = {}) {
        const streams = {};
        await Promise.all(Object.entries(configs).map(async ([key, value]) => {
            streams[key] = await this.build(value, serializers[key]);
        }));
        return streams;
    }
}
export class SimpleStream {
    dataHandlers = [];
    endHandlers = [];
    disconnect;
    lastElement;
    constructor(onDisconnect) {
        this.disconnect = onDisconnect || (async () => { });
    }
    data(listener) {
        this.dataHandlers.push(listener);
        return this;
    }
    async push(data) {
        this.lastElement = data;
        await Promise.all(this.dataHandlers.map(handler => handler(data)));
    }
    async end() {
        await this.disconnect();
        await Promise.all(this.endHandlers.map(handler => handler()));
    }
    on(event, listener) {
        if (event === "data") {
            this.dataHandlers.push(listener);
        }
        if (event === "end") {
            this.endHandlers.push(listener);
        }
        return this;
    }
}
//# sourceMappingURL=types.js.map