import type * as RDF from '@rdfjs/types';
import { BucketizerCoreExt, Factory } from '@treecg/bucketizer-core';
import { RelationParameters, BucketizerCoreExtOptions, Bucketizer } from '@treecg/types';
export declare class SubjectPageBucketizerFactory implements Factory<SubjectInputType> {
    type: string;
    build(config: BucketizerCoreExtOptions, state?: any): Bucketizer;
    ldConfig(quads: RDF.Quad[], subject: RDF.Term): SubjectInputType | void;
}
export declare type SubjectInputType = BucketizerCoreExtOptions & {
    maxRelations?: number;
};
export declare class SubjectPageBucketizer extends BucketizerCoreExt<{
    maxRelations?: number;
}> {
    rootRelationCount: number;
    rootCount: number;
    maxRelations: number;
    hash: string;
    static build(bucketizerOptions: Partial<SubjectInputType>, state?: any): SubjectPageBucketizer;
    private getRootName;
    private getCurrentStart;
    protected createBuckets(propertyPathObjects: RDF.Term[], newRelations: [string, RelationParameters][], immutables: string[]): string[];
    private readonly normalize;
    private createRelationParameters;
    exportState(): any;
    importState(state: any): void;
}
