"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubjectPageBucketizer = exports.SubjectPageBucketizerFactory = void 0;
const bucketizer_core_1 = require("@treecg/bucketizer-core");
const types_1 = require("@treecg/types");
const types_2 = require("@treecg/types");
class SubjectPageBucketizerFactory {
    constructor() {
        this.type = "subject";
    }
    build(config, state) {
        return SubjectPageBucketizer.build(config, state);
    }
    ldConfig(quads, subject) {
        var _a;
        const out = (0, bucketizer_core_1.parseBucketizerExtCoreOptions)(quads, subject);
        const maxRelations = (_a = quads.find(q => q.subject.equals(subject) && q.predicate.equals(types_1.LDES.terms.custom("maxRelations")))) === null || _a === void 0 ? void 0 : _a.object.value;
        if (maxRelations) {
            out.maxRelations = parseInt(maxRelations);
        }
        if (out.type.value === types_1.LDES.custom("subject")) {
            return out;
        }
        else {
            return;
        }
    }
}
exports.SubjectPageBucketizerFactory = SubjectPageBucketizerFactory;
class SubjectPageBucketizer extends bucketizer_core_1.BucketizerCoreExt {
    constructor() {
        super(...arguments);
        this.rootRelationCount = 0;
        this.rootCount = 0;
        this.maxRelations = 50;
        this.hash = "";
        this.normalize = (literal) => literal.trim().normalize('NFKD')
            .replace(/[\u0300-\u036F]/gu, '')
            .replace(/[,']/gu, '')
            .replace(/#/gu, '-')
            .toLowerCase();
    }
    static build(bucketizerOptions, state) {
        const bucketizer = new SubjectPageBucketizer(bucketizerOptions);
        bucketizer.maxRelations = bucketizerOptions.maxRelations || 100;
        bucketizer.hash = Math.random().toString(36).substr(2, 5);
        if (state) {
            bucketizer.importState(state);
        }
        return bucketizer;
    }
    getRootName() {
        if (this.rootCount === 0) {
            return this.getRoot();
        }
        else {
            return this.getRoot() + '-' + this.rootCount;
        }
    }
    getCurrentStart(newRelations, immutables) {
        if (this.rootRelationCount === this.maxRelations) {
            const from = this.getRootName();
            immutables.push(from);
            this.rootRelationCount = 0;
            this.rootCount += 1;
            const to = this.getRootName();
            newRelations.push([from, {
                    type: types_2.RelationType.Relation,
                    nodeId: to,
                }]);
        }
        this.rootRelationCount += 1;
        return this.getRootName();
    }
    createBuckets(propertyPathObjects, newRelations, immutables) {
        const buckets = [];
        propertyPathObjects.forEach(propertyPathObject => {
            const parts = propertyPathObject.value.split('/');
            const part = parts[parts.length - 1] + '-' + this.hash;
            if (!part)
                return;
            const hypermediaControlsMap = this.getBucketHypermediaControlsMap();
            const id = this.normalize(part);
            if (!hypermediaControlsMap.has(id)) {
                hypermediaControlsMap.set(id, []);
                const propMember = this.getPropertyPathMember();
                newRelations.push([this.getCurrentStart(newRelations, immutables), this.createRelationParameters(id, propertyPathObject, propMember.id)]);
            }
            buckets.push(id);
        });
        return buckets;
    }
    ;
    createRelationParameters(id, value, pathObject) {
        return {
            type: types_2.RelationType.EqualThan,
            value: [value],
            nodeId: id,
            path: pathObject,
        };
    }
    exportState() {
        const state = super.exportState();
        state.rootRelationCount = this.rootRelationCount;
        state.rootCount = this.rootCount;
        state.maxRelations = this.maxRelations;
        state.hash = this.hash;
        return state;
    }
    importState(state) {
        super.importState(state);
        this.rootRelationCount = state.rootRelationCount;
        this.rootCount = state.rootCount;
        this.maxRelations = state.maxRelations;
        this.hash = state.hash;
    }
}
exports.SubjectPageBucketizer = SubjectPageBucketizer;
