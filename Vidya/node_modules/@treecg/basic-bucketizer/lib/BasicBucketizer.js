"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasicBucketizer = exports.BasicBucketizerFactory = void 0;
const bucketizer_core_1 = require("@treecg/bucketizer-core");
const bucketizer_core_2 = require("@treecg/bucketizer-core");
const types_1 = require("@treecg/types");
class BasicBucketizerFactory {
    constructor() {
        this.type = "basic";
    }
    build(config, state) {
        return BasicBucketizer.build(config, state);
    }
    ldConfig(quads, subject) {
        const out = (0, bucketizer_core_1.parseBucketizerCoreOptions)(quads, subject);
        if (out.type.value === types_1.LDES.custom(this.type)) {
            return out;
        }
        else {
            return;
        }
    }
}
exports.BasicBucketizerFactory = BasicBucketizerFactory;
class BasicBucketizer extends bucketizer_core_2.BucketizerCore {
    constructor(bucketizerOptions, state) {
        super(bucketizerOptions);
        this.bucketize = (_, memberId) => {
            const out = [];
            if (this.memberCounter >= this.options.pageSize) {
                const currentPage = this.pageNumber;
                this.increasePageNumber();
                this.resetMemberCounter();
                const parameters = this.createRelationParameters(this.pageNumber);
                this.setHypermediaControls(`${currentPage}`, parameters);
                out.push(...this.expandRelation(`${currentPage}`, parameters));
            }
            this.increaseMemberCounter();
            out.push(...this.createSDSRecord(this.factory.namedNode(memberId), [`${this.pageNumber}`]));
            return out;
        };
        this.exportState = () => {
            const state = super.exportState();
            state.pageNumber = this.pageNumber;
            state.memberCounter = this.memberCounter;
            return state;
        };
        this.importState = (state) => {
            super.importState(state);
            this.pageNumber = state.pageNumber;
            this.memberCounter = state.memberCounter;
        };
        this.increasePageNumber = () => this.pageNumber++;
        this.increaseMemberCounter = () => this.memberCounter++;
        this.resetMemberCounter = () => {
            this.memberCounter = 0;
        };
        this.createRelationParameters = (targetNode) => ({
            nodeId: targetNode.toString(),
            type: types_1.RelationType.Relation,
        });
        this.pageNumber = 0;
        this.memberCounter = 0;
        if (state) {
            this.importState(state);
        }
    }
    getRoot() {
        return "0";
    }
    static build(options, state) {
        return new BasicBucketizer(options, state);
    }
}
exports.BasicBucketizer = BasicBucketizer;
