import type * as RDF from '@rdfjs/types';
import { Factory, Partial } from '@treecg/bucketizer-core';
import { BucketizerCore } from '@treecg/bucketizer-core';
import { Bucketizer, BucketizerCoreOptions } from '@treecg/types';
export declare class BasicBucketizerFactory implements Factory<BucketizerCoreOptions> {
    type: string;
    build(config: BucketizerCoreOptions, state?: any): Bucketizer;
    ldConfig(quads: RDF.Quad[], subject: RDF.Term): BucketizerCoreOptions | void;
}
export declare type BasicInputType = Partial<BucketizerCoreOptions>;
export declare class BasicBucketizer extends BucketizerCore<{}> {
    pageNumber: number;
    memberCounter: number;
    private constructor();
    getRoot(): string;
    static build(options: BasicInputType, state?: any): BasicBucketizer;
    bucketize: (_: RDF.Quad[], memberId: string) => RDF.Quad[];
    exportState: () => any;
    importState: (state: any) => void;
    private readonly increasePageNumber;
    private readonly increaseMemberCounter;
    private readonly resetMemberCounter;
    private readonly createRelationParameters;
}
