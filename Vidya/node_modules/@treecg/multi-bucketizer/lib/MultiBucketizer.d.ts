import type * as RDF from '@rdfjs/types';
import { Factory, FactoryBuilder } from '@treecg/bucketizer-core';
import { Bucketizer } from '@treecg/types';
export interface MultiBucketizerOptions<C> {
    configs: {
        config: C;
        type: string;
    }[];
}
export declare class MultiBucketizerFactory<C> implements Factory<MultiBucketizerOptions<C>> {
    type: string;
    private readonly factory;
    constructor(factory: FactoryBuilder<C>);
    build(config: MultiBucketizerOptions<C>, state?: any): Bucketizer;
    ldConfig(quads: RDF.Quad[], subject: RDF.Term): MultiBucketizerOptions<C> | void;
}
declare type Bucketizers = {
    current: Bucketizer;
    root?: RDF.Term;
    children: {
        [bucket: string]: Bucketizers;
    };
};
export declare class MultiBucketizer implements Bucketizer {
    builders: (() => Bucketizer)[];
    bucketizers: Bucketizers;
    protected readonly factory: RDF.DataFactory;
    private constructor();
    static build<C>(config: MultiBucketizerOptions<C>, factory: FactoryBuilder<C>, _state?: any): MultiBucketizer;
    bucketize(quads: RDF.Quad[], memberId: string): RDF.Quad[];
    extractBucketId(quads: RDF.Quad[], memberId: string): RDF.Term;
    bucketizePart(quads: RDF.Quad[], memberId: string, bucketizers: Bucketizers, builders: (() => Bucketizer)[]): RDF.Quad[];
    importState(_state: any): void;
    exportState(): void;
}
export {};
