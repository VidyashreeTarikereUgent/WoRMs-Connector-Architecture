"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleTimestampPath = void 0;
const types_1 = require("@treecg/types");
//TODO! timestampValue is a date
function handleTimestampPath(id, streamId, path, timestampValue, memberId, mongo, maxSize) {
    return __awaiter(this, void 0, void 0, function* () {
        // smallerIndex fragment is the fragment where we want to put this member (lagest smaller fragment)
        const smallerIndex = (yield mongo.find({ id, streamId, timeStamp: { $lte: timestampValue } }).sort({ timeStamp: -1 }).limit(1).toArray())[0];
        // There is room in the current bucket, add it and return
        if (smallerIndex && (smallerIndex.count < maxSize || timestampValue === smallerIndex.timeStamp)) {
            yield mongo.updateOne({ streamId, id, timeStamp: smallerIndex.timeStamp }, { $inc: { count: 1 }, $push: { members: memberId } });
            return;
        }
        // We will have to create a new timestamp bucket
        const relations = [];
        // if there is a smallerIndex, relate to it
        if (smallerIndex) {
            relations.push({ type: types_1.RelationType.LessThan, value: timestampValue, bucket: smallerIndex.timeStamp, path, timestampRelation: true });
            yield mongo.updateOne({ streamId, id, timeStamp: smallerIndex.timeStamp }, { "$push": { relations: { path, type: types_1.RelationType.GreaterThanOrEqualTo, value: timestampValue, bucket: timestampValue, timestampRelation: true } },
                "$set": { immutable: true }
            });
        }
        // There is no smaller index, let's see if there is a larger index 
        const largerIndex = (yield mongo.find({ id, streamId, timeStamp: { "$gt": timestampValue } }).sort({ timeStamp: -1 }).limit(1).toArray())[0];
        if (!!largerIndex) {
            // This should not happen I think
            // We potentially add a greater than or equal to relation to the next bucket
            relations.push({ type: types_1.RelationType.GreaterThanOrEqualTo, value: largerIndex.timeStamp, bucket: largerIndex.timeStamp, path, timestampRelation: true });
            // And to that bucket, we add a less then relation to the new bucket
            yield mongo.updateOne({ streamId, id, timeStamp: largerIndex.timeStamp }, { "$push": { relations: { path, type: types_1.RelationType.LessThan, value: largerIndex.timeStamp, bucket: timestampValue, timestampRelation: true } } });
        }
        yield mongo.insertOne({ streamId, id, count: 1, relations, members: [memberId], timeStamp: timestampValue });
    });
}
exports.handleTimestampPath = handleTimestampPath;
