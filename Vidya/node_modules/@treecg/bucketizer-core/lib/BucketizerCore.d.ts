import type * as RDF from '@rdfjs/types';
import type { Quad } from '@rdfjs/types';
import { Bucketizer, Logger, RelationParameters, BucketizerCoreOptions, BucketizerCoreExtOptions, Member } from '@treecg/types';
export declare type Partial<A, B = {}> = {
    [P in keyof A]?: A[P];
} & {
    [P in keyof B]: B[P];
};
export declare type BucketId = string;
export declare function findProperty(quads: RDF.Quad[], subject: RDF.Term, predicate: RDF.Term): RDF.Term;
export declare function parseBucketizerCoreOptions(quads: RDF.Quad[], subject: RDF.Term): BucketizerCoreOptions & {
    'type': RDF.Term;
};
export declare function parseBucketizerExtCoreOptions(quads: RDF.Quad[], subject: RDF.Term): BucketizerCoreExtOptions & {
    'type': RDF.Term;
};
export declare abstract class BucketizerCore<Options> implements Bucketizer {
    protected readonly factory: RDF.DataFactory;
    private bucketHypermediaControlsMap;
    options: BucketizerCoreOptions & Options;
    logger: Logger;
    constructor(options: Partial<BucketizerCoreOptions, Options>);
    private bucketNode;
    getRoot(): string;
    abstract bucketize(quads: RDF.Quad[], memberId: string): RDF.Quad[];
    getBucketHypermediaControlsMap(): Map<string, RelationParameters[]>;
    getHypermediaControls(bucket: BucketId, create: true): RelationParameters[];
    getHypermediaControls(bucket: BucketId, create?: boolean): RelationParameters[] | undefined;
    protected expandRelation(from: string, to: RelationParameters): RDF.Quad[];
    protected createSDSRecord(id: RDF.Term, buckets: string[]): RDF.Quad[];
    protected setHypermediaControls(bucket: BucketId, ...controls: RelationParameters[]): void;
    protected addHypermediaControls(bucket: BucketId, ...newControls: RelationParameters[]): void;
    exportState(): any | undefined;
    importState(state: any): void;
}
export declare abstract class BucketizerCoreExt<Options = {}> extends BucketizerCore<BucketizerCoreExtOptions & Options> {
    propertyPathPredicates: RDF.Term[];
    private bucketlessPageNumber;
    private bucketlessPageMemberCounter;
    constructor(bucketizerOptions: Partial<BucketizerCoreExtOptions, Options>);
    getPropertyPathMember(): Member;
    private setPropertyPathQuads;
    /**
       * Returns triples indicating the buckets in which the version object must be place
       * and information about these bucket and how they relate
       *
       * Note: This information about buckets is stateful, a previous bucket may be referred to.
       */
    bucketize(quads: RDF.Quad[], memberId: string): RDF.Quad[];
    /**
       * Selects the bucket for the LDES member based on the value of the property path object
       */
    protected abstract createBuckets(propertyPathObject: RDF.Term[], newRelations: [string, RelationParameters][], immutables: string[]): string[];
    /**
       * Returns the RDF Term that matches the property path and will be used to create a bucket triple
       * @param memberQuads an array of quads representing a member
       * @param memberId identifier of the member
       * @returns an RDF Term
       */
    protected extractPropertyPathObject: (memberQuads: RDF.Quad[], memberId: string | RDF.Term, properties?: RDF.Term[]) => RDF.Term[];
    getPropertyPathPredicates(): RDF.Term[];
    exportState(): any;
    getRoot(): string;
    importState(state: any): void;
    fallback: (newRelations: [string, RelationParameters][]) => string;
}
