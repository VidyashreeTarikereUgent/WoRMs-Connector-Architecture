import type * as RDF from '@rdfjs/types';
import { Factory, Partial } from '@treecg/bucketizer-core';
import { BucketizerCoreExt } from '@treecg/bucketizer-core';
import { Bucketizer } from '@treecg/types';
import type { RelationParameters, BucketizerCoreExtOptions } from '@treecg/types';
export declare class SubstringBucketizerFactory implements Factory<BucketizerCoreExtOptions> {
    type: string;
    build(config: BucketizerCoreExtOptions, state?: any): Bucketizer;
    ldConfig(quads: RDF.Quad[], subject: RDF.Term): BucketizerCoreExtOptions;
}
export declare type SubstringInputType = Partial<BucketizerCoreExtOptions>;
export declare class SubstringBucketizer extends BucketizerCoreExt<{}> {
    bucketCounterMap: Map<string, number>;
    private constructor();
    static build(bucketizerOptions: SubstringInputType, state?: any): SubstringBucketizer;
    protected createBuckets: (propertyPathObjects: RDF.Term[], newRelations: [string, RelationParameters][]) => string[];
    exportState(): any;
    importState(state: any): void;
    /**
       * Normalizes a string by removing diacritics and comma's,
       * replaces hyphens with spaces
       * and finally transforms the string to lowercase
       * @param literal object value from an RDF.Quad
       * @returns the normalized object value
       */
    private readonly normalize;
    private readonly hasRoom;
    private readonly updateCounter;
    private readonly createRelationParameters;
}
