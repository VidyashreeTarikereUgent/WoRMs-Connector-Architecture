import type * as RDF from '@rdfjs/types';
import { Factory, Partial } from '@treecg/bucketizer-core';
import { BucketizerCoreExt } from '@treecg/bucketizer-core';
import { Bucketizer } from '@treecg/types';
import type { RelationParameters, BucketizerCoreExtOptions } from '@treecg/types';
export declare class GeospatialBucketizerFactory implements Factory<BucketizerCoreExtOptions & {
    "zoom": number;
}> {
    type: string;
    build(config: BucketizerCoreExtOptions & {
        'zoom': number;
    }, state?: any): Bucketizer;
    ldConfig(quads: RDF.Quad[], subject: RDF.Term): BucketizerCoreExtOptions & {
        'zoom': number;
    } | void;
}
export interface ITileMetadata {
    pageNumber: number;
    memberCounter: number;
}
export declare type GeospatialInputType = Partial<BucketizerCoreExtOptions, {
    'zoom': number;
}>;
export declare class GeospatialBucketizer extends BucketizerCoreExt<{
    'zoom': number;
}> {
    private zoomLevel;
    private readonly slippyMaps;
    private tileMetadataMap;
    private constructor();
    static build(bucketizerOptions: GeospatialInputType, state?: any): GeospatialBucketizer;
    protected createBuckets: (propertyPathObjects: RDF.Term[], newRelations: [string, RelationParameters][]) => string[];
    private readonly createRelationParameters;
    exportState(): any;
    importState(state: any): void;
    private readonly createTileMetadata;
    private readonly updateTileMetadata;
    private readonly updateColumnHypermediaControls;
}
