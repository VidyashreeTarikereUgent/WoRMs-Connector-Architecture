var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { randomInt } from "crypto";
import { DataFactory } from 'n3';
import * as N3 from 'n3';
const { namedNode, literal, quad } = DataFactory;
const NS = "http://time.is/ns#";
const types = [
    { x: 2, y: 4 },
    { x: 3, y: 4 },
    { x: 2, y: 2 },
    { x: 3, y: 3 },
    { x: 4, y: 4 },
    { x: 5, y: 5 },
    { x: 6, y: 6 },
];
function generateMember(i, includeT) {
    const id = namedNode(NS + i);
    const q = (p, o) => quad(id, namedNode(p), literal(o));
    const { x, y } = types[i % types.length];
    const quads = [
        q(NS + "x", x + ""),
        q(NS + "y", y + ""),
        q(NS + "v", randomInt(100) + ""),
    ];
    if (includeT) {
        quads.push(q(NS + "time", Date.now() + ""));
    }
    return new N3.Writer().quadsToString(quads);
}
export function generate(writer, countstr, waitstr, withTimestamp) {
    return __awaiter(this, void 0, void 0, function* () {
        const withT = withTimestamp ? withTimestamp.toLowerCase() === "true" : false;
        (function () {
            return __awaiter(this, void 0, void 0, function* () {
                console.log(`generate starting`);
                const count = countstr ? parseInt(countstr) : 100000;
                const wait = waitstr ? parseFloat(waitstr) : 50.0;
                for (let i = 0; i < count; i++) {
                    console.log(`${i}/${count}`);
                    yield writer.push(generateMember(i, withT));
                    yield new Promise(res => setTimeout(res, wait));
                }
            });
        })();
    });
}
