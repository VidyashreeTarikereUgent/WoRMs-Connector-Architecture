import { Stream, Writer } from "@treecg/connector-types";
import { BlankNode, DataFactory, NamedNode, Quad, Store } from "n3";
export declare const namedNode: typeof DataFactory.namedNode, blankNode: typeof DataFactory.blankNode, literal: typeof DataFactory.literal, quad: typeof DataFactory.quad;
export declare type NBNode = NamedNode | BlankNode;
export declare type ShapeTransform = (id: NBNode | undefined, store: Store) => NBNode | undefined;
export declare type AddProcess = (used: NBNode | undefined, store: Store) => NBNode;
export declare type DatasetTransform = (used: NBNode | undefined, store: Store) => NBNode;
export declare type QuadsTransform = (quads: Quad[]) => Quad[];
export declare function transformMetadata(streamId: NBNode, sourceStream: NamedNode | undefined, itemType: string, gp: AddProcess, shT?: ShapeTransform, datasetT?: DatasetTransform): QuadsTransform;
export declare function createProperty(store: Store, path: NBNode, dataType?: NBNode, nodeKind?: NBNode, minCount?: number, maxCount?: number): BlankNode | NamedNode;
export declare type SR<T> = {
    [P in keyof T]: Stream<T[P]>;
};
export declare type SW<T> = {
    [P in keyof T]: Writer<T[P]>;
};
