import { DataFactory } from "n3";
import { createProperty, literal, transformMetadata } from "./core.js";
import { EX, PPLAN, PROV, RDF, SHACL, XSD } from "@treecg/types";
const { namedNode } = DataFactory;
function shapeTransform(id, store) {
    const newId = store.createBlankNode();
    if (id) {
        const quads = store.getQuads(id, null, null, null);
        store.addQuads(quads);
        return newId;
    }
    const intTerm = XSD.terms.integer;
    const p1 = createProperty(store, EX.terms.custom("x"), intTerm, undefined, 1, 1);
    const p2 = createProperty(store, EX.terms.custom("y"), intTerm, undefined, 1, 1);
    store.addQuad(newId, RDF.terms.type, SHACL.terms.NodeShape);
    store.addQuad(newId, SHACL.terms.targetClass, EX.terms.custom("Point"));
    store.addQuad(newId, SHACL.terms.property, p1);
    store.addQuad(newId, SHACL.terms.property, p2);
    return newId;
}
function addProcess(id, store) {
    const newId = store.createBlankNode();
    const time = new Date().getTime();
    store.addQuad(newId, RDF.terms.type, PPLAN.terms.Activity);
    if (id)
        store.addQuad(newId, PROV.terms.used, id);
    store.addQuad(newId, PROV.terms.startedAtTime, literal(time));
    return newId;
}
export function updateMetadata(sr, sw, sourceStream, newStream) {
    const sourceStreamName = sourceStream ? namedNode(sourceStream) : undefined;
    const newStreamName = namedNode(newStream);
    const f = transformMetadata(newStreamName, sourceStreamName, "sds:Member", addProcess, shapeTransform);
    sr.metadata.data(quads => sw.metadata.push(f(quads)));
}
