
const run = sjx_eval => eval(sjx_eval);

// iiaf to isolate scope from eval
(function() {
	// queueMicrotask shim
	{
		// not defined or not a function
		if('function' !== typeof queueMicrotask) {
			// create resolved promise
			let dp_resolve = Promise.resolve();

			// try to redefine
			try {
				// eslint-disable-next-line no-global-assign
				queueMicrotask = fk => dp_resolve.then(fk)
					.catch(e_callback => setTimeout(() => {
						throw e_callback;
					}, 0));
			}
			// oh well, at least we tried
			catch(e_define) {}
		}
	}



	const events = require('events');
	const path = require('path');
	const stream = require('@graphy/core.iso.stream');
	const reader = require('@graphy/content.nt.read');
	const master = require('@graphy/core.iso.threads').master;
	const {StringDecoder} = require('string_decoder');
	const H_PRESET_TASKS = require('./task-presets.js');

	// fast 4 byte writer from bkit
	const f_writer_uintle32 = (at, ib, x) => {
		at[ib] = x & 0xff;
		at[ib+1] = (x >>> 8) & 0xff;
		at[ib+2] = (x >>> 16) & 0xff;
		at[ib+3] = (x / 0x1000000) & 0xff;
		return at;
	};

	const N_DEFAULT_SLOTS_PER_WORKER = 3;



	// adapted from https://www.npmjs.com/package/physical-cpu-count
	let NL_WORKERS_ADVISE = (() => {
		const cp = require('child_process');
		const os = require('os');

		const exec = s_cmd => cp.execSync(s_cmd, {encoding:'utf8'});

		switch(os.platform()) {
			case 'linux': {
				let s_out = exec(/* syntax: shell */ `lscpu -p | egrep -v "^#" | sort -u -t, -k 2,4 | wc -l`);
				return parseInt(s_out.trim(), 10);
			}

			case 'darwin': {
				let s_out = exec(/* syntax: shell */ `sysctl -n hw.physicalcpu_max`);
				return parseInt(s_out.trim(), 10);
			}

			case 'windows': {
				let s_out = exec(/* syntax: shell */ `WMIC CPU Get NumberOfCores`);
				return s_out.split(os.EOL)
					.map(s => parseInt(s))
					.filter(n => !isNaN(n))
					.reduce((c_out, n) => c_out + n, 0);
			}

			default: {
				return os.cpus().filter((g_cpu, i_cpu) => {
					let b_hyperthreading = g_cpu.model.includes('Intel');
					let b_odd = 1 === (i_cpu % 2);
					return !b_hyperthreading || b_odd;
				}).length;
			}
		}
	})() - 1;



	function Scanner$handle_worker_message(k_self, i_worker) {
		return (g_msg) => {
			switch(g_msg.type) {
				// update
				case 'update': {
					// ref message payload
					let w_value = g_msg.value;

					// sync receive update transform
					if(k_self._f_receive_update) w_value = k_self._f_receive_update(w_value, i_worker);

					// apply update handler
					k_self._f_update(w_value, i_worker);
					break;
				}

				// submit
				case 'submit': {
// console.log(`received result from worker ${i_worker}: ${g_msg.value}; ${a_reports.length+1} results`);

					// ref message payload
					let w_value = g_msg.value;

					// sync receive submit transform
					if(k_self._f_receive_submit) w_value = k_self._f_receive_submit(w_value, i_worker);

					// reduce
					k_self._w_reduced = k_self._f_reduce(k_self._w_reduced, w_value);

					// all results have been collected
					if(k_self._nl_workers === ++k_self._c_reports) {
						if(k_self._b_eofed) {
							k_self._f_report(k_self._w_reduced);
						}
						else {
							k_self._b_collected = true;
						}
					}

					break;
				}

				// error
				case 'error': {
					// error struct
					let g_error = g_msg.value;

					// reconstruct error
					let e_throw = new Error(g_error.message);
					e_throw.stack = g_error.stack;

					// kill workers and throw error
					return k_self._kill(e_throw, i_worker);
				}

				// throw
				case 'throw': {
					// ref error struct
					let z_throw = g_msg.value;

					// issue warning
					console.warn(`WARNING: Your code (or some library) on the worker is throwing an object which is not an instance of Error. I am going to put it into an Error for you now, but please fix this. The object.toString() is: "${z_throw}"`);

					// construct error
					let e_wrap = new Error(z_throw+'');

					// kill workers and throw error
					return k_self._kill(e_wrap, i_worker);
				}

				// clone error
				case 'clone-error': {
					// ref error struct
					let g_clone = g_msg.value;

					// construct error
					let e_clone = new Error(`You are trying to call '${g_clone.info}' on some object from within one of the workers, but that object is not serializable using the structured clone algorithm. The object.toString() is: "${g_clone.obejct}"... the error about the worker failing to send the original error to the master thread is:\n${g_clone.error}`);

					// kill workers and throw error
					return k_self._kill(e_clone, i_worker);
				}


				// other
				default: {
					console.assert(`invalid worker message type: ${g_msg.type}`);
				}
			}
		};
	}


	// fill open slots with next chunk from input stream
	function Scanner$fill_slots(k_self) {
		let ds_input = k_self._ds_input;
		let a_slots_open = k_self._a_slots_open;
		let nb_high_water_mark = k_self._nb_high_water_mark;
		let nb_slot = k_self._nb_slot;
		let atu8_data = k_self._atu8_data;
		let atu8_slot_owners = k_self._atu8_slot_owners;
		let at32_indicators = k_self._at32_indicators;
		let a_slot_states = k_self._a_slot_states;
		let ab_prev = k_self._ab_prev;
		let ds_reader = k_self._ds_reader;

		// prep chunk placeholder
		let ab_chunk;

		// while there are open slots
		while(a_slots_open.length) {
			// read chunk from input stream
			ab_chunk = ds_input.read();

			// buffer is drained; break read loop
			if(null === ab_chunk) break;

			// chunk size exceeds high water mark
			if(ab_chunk.length > nb_high_water_mark) {
				// unshift remainder back into internal buffer
				let ab_unshift = ab_chunk.slice(nb_high_water_mark);

				// pick limit part for this chunk
				ab_chunk = ab_chunk.slice(0, nb_high_water_mark);

				// unshift
				ds_input.unshift(ab_unshift);
			}

			// read head/tail
			let ib_head = ab_chunk.indexOf(0x0a) + 1;
			let ib_tail = ab_chunk.lastIndexOf(0x0a) + 1;

			// take next open slot
			let i_slot = a_slots_open.shift();

			// slot position
			let ib_slot = i_slot * nb_slot;

			// payload size
			let nb_payload = ib_tail - ib_head;
			f_writer_uintle32(atu8_data, ib_slot, nb_payload);

			// fill it
			ab_chunk.copy(atu8_data, ib_slot+4, ib_head, ib_tail);

			// mark slot ready
			atu8_slot_owners[i_slot] = 255;

			// set indicator & notice
			at32_indicators[0] += 1;
			let n_awoke = Atomics.notify(at32_indicators, 0);
// log(`woke ${n_awoke} sleeping threads}`);

			// set slot state
			a_slot_states[i_slot] = 1;

			// join head with prev
			let ab_head = ab_chunk.slice(0, ib_head);
			let ab_write = Buffer.concat([ab_prev, ab_head], ab_prev.length+ab_head.length);

			let s_write = ab_write.toString('utf8');

			// write to reader
			ds_reader.write(s_write);

			// save tail to prev
			ab_prev = ab_chunk.slice(ib_tail);
		}

		// update prev chunk value
		k_self._ab_prev = ab_prev;

		// buffer is drained
		if(0 === ds_input.readableLength) {
			// but did not reach null
			if(null !== ab_chunk) {
				// trigger
				let z_read = ds_input.read();

				// assert null
				if(null !== z_read) {
					throw new Error(`expected to reach null in paused stream readable but received ${z_read? 'chunk data instad': 'skipped event'}`);
				}
			}

			// await readable
			return true;
		}

		// have not consumed everything
		return false;
	}

	// drain returned slots
	function Scanner$drain_slots(k_self) {
		let nl_slots = k_self._nl_slots;
		let atu8_slot_owners = k_self._atu8_slot_owners;
		let a_slot_states = k_self._a_slot_states;
		let a_slots_open = k_self._a_slots_open;

		let c_drained = 0;

		// read results
		for(let i_slot=0; i_slot<nl_slots; i_slot++) {
			// slot returned
			if(0 === atu8_slot_owners[i_slot] && 1 === a_slot_states[i_slot]) {
				// update slot state
				a_slot_states[i_slot] = 0;

				// mark slot as open
				a_slots_open.push(i_slot);

				// number of slots drained
				c_drained += 1;
			}
		}

		return c_drained;
	}


	function Scanner$attach_readable(k_self) {
		let ds_input = k_self._ds_input;
		let nl_workers = k_self._nl_workers;
		let at32_indicators = k_self._at32_indicators;

		// each time the input stream emits readable (this switches to paused mode)
		ds_input.on('readable', () => {
			k_self._tick();
		});

		// no workers
		if(0 === nl_workers) {
			// override tick function
			k_self._tick = Scanner$_tick_master_only;

			// presume worker reports collected
			k_self._b_collected = true;

			// end
			ds_input.on('end', () => {
				// final chunk
				let s_final = k_self._d_string_decoder.end();

				// end writable side of content reader
				k_self._ds_reader.end(s_final);
			});
		}
		// yes workers
		else {
			// end
			ds_input.on('end', () => {
				// set indicator and notify
				at32_indicators[0] = -1;
				let c_notified = Atomics.notify(at32_indicators, 0);

				// reassign tick function
				k_self._tick = () => {};

				// final chunk
				let s_final = k_self._ab_prev.toString('utf8');

				// end writable side of content reader
				k_self._ds_reader.end(s_final);
			});
		}
	}

	// special tick function if no workers
	function Scanner$_tick_master_only() {
		let ds_input = this._ds_input;
		let ds_reader = this._ds_reader;
		let d_string_decoder = this._d_string_decoder;

		let ab_chunk;
		while(null !== (ab_chunk=ds_input.read())) {
			ds_reader.write(d_string_decoder.write(ab_chunk));
		}
	}


	class NTriples_Scanner extends stream.Readable {
		constructor(gc_scanner) {
			super();

			// worker and slot settings
			let nl_workers = this._nl_workers = (gc_scanner.threads || (NL_WORKERS_ADVISE+1)) - 1;
			this._n_slots_per_worker = gc_scanner.slots_per_worker || gc_scanner.slotsPerWorker || N_DEFAULT_SLOTS_PER_WORKER;

			// flags
			this._b_eofed = false;
			this._b_collected = false;

			// report count
			this._c_reports = 0;

			// list of workers
			this._a_workers = [];

			// queue of open slots
			this._a_slots_open = [];

			// slot states
			this._a_slot_states = [];

			// previous chunk fragment
			this._ab_prev = Buffer.allocUnsafe(0);

			// string decoder
			this._d_string_decoder = new StringDecoder();

			// open slot resolve
			this._f_resolve_open_slot = null;

			// reader ready resolve
			this._f_resolve_reader_ready = null;

			if(gc_scanner.error) this.on('error', gc_scanner.error);
			if(gc_scanner.update) this.on('update', gc_scanner.update);
			if(gc_scanner.report) this.once('report', gc_scanner.report);


			// semaphores
			this.b_ready_pipe = null;
			this.b_ready_reader = false;
			this.b_unpiped_self = false;

			// default preset config
			let g_preset = {};

			// preset given
			if(gc_scanner.preset) {
				let si_preset = gc_scanner.preset;

				// no such preset name
				if(!H_PRESET_TASKS[si_preset]) {
					throw new Error(`No such NTriples_Scanner preset named '${si_preset}'`);
				}

				// generate preset config
				g_preset = H_PRESET_TASKS[gc_scanner.preset]({
					...gc_scanner,

					// auto-populate format
					format: 'nt',
				});
			}

			// task config
			let g_task = {
				...g_preset,
				...(gc_scanner.task || {}),
				...gc_scanner,
			};

			// run function
			let sjx_run = this._sjx_run = g_task.run;

			// missing run function
			if('string' !== typeof sjx_run || !sjx_run) {
				throw new TypeError('Invalid \'.run\' property supplied to NTriples_Scanner constructor; must be a non-empty string.');
			}

			// try creating run function
			let f_run;
			try {
				// f_run = (new Function(`return (${sjx_run})`))();  // eslint-disable-line no-new-func
				f_run = run(`(${sjx_run})`);  // eslint-disable-line no-eval
			}
			catch(e_eval) {
				throw new Error(`Failed to evaluate the '.run' property supplied to NTriples_Scanner constructor as JavaScript code: """\n${sjx_run}"""\n${e_eval.stack || e_eval}`);
			}

			// reduce property supplied
			if(g_task.reduce) {
				let f_reduce = g_task.reduce;

				// invalid reduce property
				if('function' !== typeof f_reduce) {
					throw new TypeError('Invalid \'.reduce\' property supplied to NTriples_Scanner constructor; if present, it must be a function.');
				}

				// set reduce function
				this._f_reduce = f_reduce;

				// initial value also present
				if('undefined' !== typeof g_task.initial) {
					this._w_initial = g_task.initial;
				}
				// no initial value; set master as initial
				else {
					this._f_submit_master = w_value => this._w_reduced = w_value;
				}
			}
			// initial value present
			else if('undefined' !== typeof g_task.initial) {
				throw new TypeError('The \'.initial\' property was supplied to NTriples_Scanner constructor but you also need to specify a \'.reduce\' function.');
			}

			// user property
			let z_user = g_task.user;

			// callback function; save
			if('function' === typeof z_user) {
				this._f_spawn = z_user;
			}
			// other
			else {
				this._f_spawn = () => z_user;
			}

			// receive handler(s)
			let z_receive = g_task.receive;

			// receive function
			if('function' === typeof z_receive) {
				this._f_receive_update = this._f_receive_submit = z_receive;
			}
			// different handlers for update and submit events
			else if(z_receive) {
				// update handler supplied
				if(z_receive.update) {
					this._f_receive_update = z_receive.update;
				}

				// submit handler supplied
				if(z_receive.submit) {
					this._f_receive_submit = z_receive.submit;
				}
			}


			let k_self = this;

			// create content reader
			(async() => {
				let ds_reader = this._ds_reader = await f_run(reader, ...[
					// handle errors
					function err(z_what) {
						// proper error instance
						if(z_what instanceof Error) {
							// kill workers and handle error
							k_self._kill(z_what, 0);
						}
						// invalid error type
						else {
							// issue warning
							console.warn(`WARNING: Your code (or some library) on the main thread is throwing an object which is not an instance of Error. I am going to put it into an Error for you now, but please fix this. The object.toString() is: "${z_what}"`);

							// construct error
							let e_wrap = new Error(z_what+'');

							// kill workers and throw error
							k_self._kill(e_wrap, 0);
						}
					},

					// 'update' with some info
					function update(w_msg) {
						k_self._f_update(w_msg, 0);
					},

					// 'submit' results
					function submit(w_value) {
						k_self._f_submit_master(w_value);
					},

					// user data
					this._f_spawn(0),

					// not a worker
					false,
				]);

				// attach automatic error handler to kill workers
				ds_reader.on('error', (e_read) => {
					this._kill(e_read, 0);
				});

				// once main thread content reader has finished
				ds_reader.once('eof', () => {
					// all results collected from workers
					if(this._b_collected) {
						this._f_report(this._w_reduced);
					}
					// set flag that we eof'd
					else {
						this._b_eofed = true;
					}
				});

				// input has been imported
				if(this._b_ready_input) {
					Scanner$attach_readable(this);
				}
			})();

			// input given
			let g_input = gc_scanner.input;
			if(g_input) {
				// stream
				if(g_input.stream) {
					this.import(g_input.stream);
				}
				// string
				else if(g_input.string) {
					// ref input string
					let s_input = g_input.string;

					// cache its length
					let nl_input = s_input.length;

					// read position
					let i_read = 0;

					// import
					this.import(new stream.Readable({
						highWaterMark: 0x10000,

						_read() {
							// end of read range position
							let i_next = i_read + 0x10000;

							// reach end of string; push eof signal
							if(i_next >= nl_input) {
								this.push(null);
							}
							// still data
							else {
								// convert string to buffer
								this.push(Buffer.from(s_input.slice(i_read, i_next)));

								// update read position
								i_read = i_next;
							}
						},
					}));
				}
				// other
				else {
					throw new Error(`NTriples_Scanner: Invalid option supplied to '.input' property "${g_input}"`);
				}
			}
		}

		_kill(e_reason, i_thread) {
			// destroy callbacks
			this._f_report = this._f_update = this._kill = () => {};

			// kill all workers
			Promise.all(this._a_workers.map(d => d.terminate()))
				.then(() => queueMicrotask(() => {
					this.emit('error', e_reason, i_thread);
				}));
		}

		import(ds_input) {
			// input has already been imported
			if(this._b_ready_input) {
				throw new Error(`More than one input was imported to NTriples_Scanner; only a single input source can be imported and only once.`);
			}

			// mark input ready
			this._b_ready_input = true;

			// save input
			this._ds_input = ds_input;

			// byte size ofhigh water mark
			let nb_high_water_mark = this._nb_high_water_mark = Math.max(0x10000, ds_input.readableHighWaterMark);

			let nl_workers = this._nl_workers;

			let nl_slots = this._nl_slots = this._n_slots_per_worker * nl_workers;

			let nb_slot = this._nb_slot = 4 + nb_high_water_mark;

			let nl_indicators = 2;
			let nb_indicators = nl_indicators * 4;

			let nb_slot_owners = nl_slots * 1;
			let nb_region = (nb_indicators)  // indicators
			+ (nb_slot_owners)  // slot owners
			+ (nb_slot * nl_slots);  // slot data

			// create shared memory region
			let ab_share = new SharedArrayBuffer(nb_region);

			// indicators
			let at32_indicators = this._at32_indicators = new Int32Array(ab_share, 0, nl_indicators);

			// slot owner and data byte positions
			let ib_slots = 0 + nb_indicators;
			let ib_data = ib_slots + (nb_slot_owners);

			// slot owners
			let atu8_slot_owners = this._atu8_slot_owners = new Uint8Array(ab_share, ib_slots, nl_slots);

			// slot data
			let atu8_data = this._atu8_data = new Uint8Array(ab_share, ib_data);


			// initially, all slots are claimed by master thread
			for(let i_slot=0; i_slot<nl_slots; i_slot++) {
				// set slot owner to master thread
				atu8_slot_owners[i_slot] = 0;
// a_slot_owners_internal.push(XC_SLOT_OWNER_MASTER);

				// push open slot to queue
				this._a_slots_open.push(i_slot);

				// set initial slot state
				this._a_slot_states.push(0);
			}


			// spawn workers
			{
				let a_workers = this._a_workers;

				let g_worker_data = {
					sjx_run: this._sjx_run,
					// ab_share,
					nl_workers,
					nl_slots,
					nb_slot,
					at32_indicators,
					// nb_region,
					atu8_slot_owners,
					atu8_data,
				};

				// ref spawn (and then call without context)
				let f_spawn = this._f_spawn;

				// each worker
				for(let i_worker=1; i_worker<=nl_workers; i_worker++) {
					// spawn
					let d_worker = new master.Worker('./worker.js', {
						__dirname,

						workerData: {
							...g_worker_data,
							i_worker,
							w_user: f_spawn(i_worker),
						},

						// on message event
						message: Scanner$handle_worker_message(this, i_worker),

						// inherit resource limits from main
						resourceLimits: 'inherit',
					});

// d_worker.on('message', );

					// push to worker list
					a_workers.push(d_worker);
				}
			}

			// reader is ready; attach readable event listener
			if(this._b_ready_reader) {
				Scanner$attach_readable(this);
			}
		}

		_tick(b_softlock) {
			let at32_indicators = this._at32_indicators;

			// grab indicator
			let xc_indicator_reclaim = Atomics.load(at32_indicators, 1);

			// fill slots, return value indicates exitting due to slots being full
			let b_await_readable = Scanner$fill_slots(this);

			// drain slots
			let n_drained = Scanner$drain_slots(this);

			// need to explicitly recall tick
			if(!b_await_readable) {
				// something drained (or no workers)
				if(n_drained) {
					// retick, avoiding recursion
					queueMicrotask(() => {
						this._tick();
					});
				}
				else {
					// avoid recursion; use setImmediate (need event loop to process messages from worker)
					setImmediate(() => {
						// await change
						let s_status = Atomics.wait(at32_indicators, 1, xc_indicator_reclaim, 2000);

						// awaiting lock timed out
						if('timed-out' === s_status) {
							// this could be a softlock
							if(b_softlock) {
								console.warn(`WARNING: NTriples_Scanner main thread waited more than 2000ms for a response from one of its ${this._nl_workers} worker(s); now escaping potential softlock`);
							}

							// set indicator and notify
							at32_indicators[0] += 1;
							Atomics.notify(at32_indicators, 0);

							// tick next
							return this._tick(true);
						}
					// else if('not-equal' === s_status) {
					// 	log(`awaited indicator: ${s_status}; ${Atomics.load(at32_indicators, 1)}`);
// }

						// retick
						this._tick();
					});
				}
			}
		}
	}

	Object.assign(NTriples_Scanner.prototype, {
		// initial value
		_w_initial: [],

		// default reduce function
		_f_reduce: (a_out, w_value) => [...a_out, w_value],

		// update handler
		_f_update(w_report, i_thread) {
			if(!this.emit('update', w_report, i_thread)) {
				console.warn(`WARNING: NTriples_Scanner emitted an 'update' event but no listener function is attached`);
			}
		},

		// report handler
		_f_report(w_report) {
			if(!this.emit('report', w_report)) {
				console.warn(`WARNING: NTriples_Scanner emitted a 'report' event but no listener function is attached`);
			}

		// // emit end event
		// queueMicrotask(() => {
		// 	this.emit('end');
		// });
		},

		// receive handlers
		_f_receive_update: null,
		_f_receive_submit: null,

		// submit master
		_f_submit_master(w_report) {
			this._w_reduced = this._f_reduce(this._w_initial, w_report);
		},

		// spawn function
		_f_spawn: () => {},
	});



	module.exports = function(...a_args) {
		let g_config = {};

		// at least one argument
		if(a_args.length) {
			let z_arg_0 = a_args[0];

			// input given unspecified
			if(z_arg_0 && z_arg_0.input && 'undefined' === typeof z_arg_0.input.string && !z_arg_0.input.stream) {
				z_arg_0 = z_arg_0.input;
			}

			// string
			if('string' === typeof z_arg_0) {
				g_config.input = {string:z_arg_0};
			}
			// null
			else if(null === z_arg_0) {
				g_config.input = null;
			}
			// node stream
			else if('function' === typeof z_arg_0.setEncoding) {
				g_config.input = {stream:z_arg_0};
			}
			// whatwg stream
			else if('function' === typeof z_arg_0.pipeTo) {
				throw new TypeError(`Sorry, WHATWG streams are currently not supported :(`);
			// g_config.input = {stream:z_arg_0};
			}
			// config struct
			else if(z_arg_0 && 'object' === typeof z_arg_0 && '[object Object]' === Object.prototype.toString.call(z_arg_0)) {
				g_config = z_arg_0;

				// more args; invalid
				if(a_args.length > 1) {
					throw new TypeError(`unexpected argument(s) after config struct: ${a_args.slice(1)}`);
				}
			}
			// unknown
			else {
				throw new TypeError(`unexpected input type: ${z_arg_0}`);
			}

			// more args
			if(a_args.length > 1) {
				// copy onto struct
				Object.assign(g_config, a_args[1]);

				// more args
				if(a_args.length > 2) {
					throw new TypeError(`unexpected argument(s) after input and config struct: ${a_args.slice(2)}`);
				}
			}
		}

		// create reader, return transform stream
		return (new NTriples_Scanner(g_config));
	};
})();
